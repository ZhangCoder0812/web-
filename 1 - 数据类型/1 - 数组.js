/* 
 
 稀疏数组：数组有长度但是全为空或者某几项为空。稀疏也就是说，数组中的元素之间可以有空隙
        let a = [, , , , , , ,];
        let b = [1, 2, , 3, 4, , , 5];

     以下操作会造成稀疏数组：
        
        var a = new Array(5); // 构造函数声明一个没有元素的数组 [empty × 5]
   
        var a = [];
        a[5] = 4; // 指定的索引值大于数组长度 [empty × 5, 4]

        var a = [];
        a.length = 5; // 指定大于元素个数的数组长度 [empty × 5]

        var a = [0, , , ,]; // 数组直接量中省略值 [0, empty × 3]

        var a = [0, 1, 2, 3, 4];
        delete a[4]; // 删除数组元素 [0, 1, 2, 3, empty]
  
  密集数组：      
        

*/

// 数组塌陷
let arr1 = [10, 20, 30, 40, 50];

for (let i = 0; i < arr1.length; i++) {
  arr1.splice(i, 1);
}

console.log(arr1); // [20,40] 移除一个元素 数组的索引发生变化 原本i=1的位置代替来1=2的位置 依次类推...
// 第一次  i=0  [10, 20, 30, 40, 50]  ->  [20, 30, 40, 50]
// 第二次  i=1  [20, 30, 40, 50] -> [20, 40, 50]
// 第三次  i=2  [20, 40, 50] -> [20 ,40]

// 解决塌陷 方式一
for (let i = 0; i < arr1.length; i++) {
  arr1.splice(i, 1);
  i--; //这样每次删除 就是 只删除 位置为0 的元素
}

// 解决塌陷 方式二  倒着来,这样每次删除的就是最后一个位置 的元素
for (let i = arr.length - 1; i >= 0; i--) {
  arr.splice(i, 1);
}
