/* 

parseInt(value,radix) 返回的都是10进制 radix表示传入的是进制 最后都转为10进制输出
                    parseFloat 没有进制
   
     - 先把value转换字符串 从左到右查找符合进制的有效数字 遇到不符合进制的有效数字结束查找 
       将找到的数字进行进制预算。都没有找到返回 NaN
       如：parseInt('12ab3') => 没传进制默认为10进制 有效数字为 12 最后返回12
           parseInt(1234,3) => 传入3进制 1234先转为字符串'1234' 查找符合3进制的数字 12 
                                3,4 数字超出3进制数范围。最后返回 2*3**0 + 1*3**1 = 5
     - radix 进制 范围 2~36 ，超出返回NaN 0除外
       不传默认10进制，传0也是10进制，   
     - 字符串要是以 0x 开始默认值16进制 
       以0开始代表 8进制 
       console.log(0123) => 83 
       parseInt(0123) => 83 不是parseInt处理的 浏览器默认以0开头的数字转为8进制
                             相当于  parseInt(83)
 
2进制 0~1
8进制 0~7
10进制 0~9
16进制 0~9 A~F

其他值转为10进制：n*radix**index 小数点后面为负次幂
  
 - 8进制 123.45 转为 10进制：3*8**0 + 2*8**1 + 1*8**2 + 4*8**-1 +4*8**-2 = 83.5625
   parseInt(123.45,8) => 83 小数点后面不识别 因为是转为整数   

 - parseInt('0x0BAF3') = 47859 以 0x 开始默认值16进制
   3*16**0 + 15*16**1 + 10*16**2 + 11*16**3 + 0*16**4 = 47859

*/




let arr = [27.2, 0, '0013', '14px', 123]
arr = arr.map(parseInt)
console.log(arr) // [ 27, NaN, 1, 1, 27 ]

/*
 arr.map((item,index)=>{

 })

 parseInt(27.2,0) => 27 传0也是10进制
 parseInt(0,1) => NaN 不在进制范围内
 parseInt('0013',2) => 找符合2进制的字符串 '001' 再转为10进制  1
 parseInt('14px',3) => 找符合3进制的字符串 '1' 再转为10进制  1*3**0 = 1
 parseInt(123,4) => 先转为字符串'123' 找符合4进制的字符串 123 当做4进制转为10进制
                    3*4**0 + 2*4**1 + 1*4**2 = 27

*/
